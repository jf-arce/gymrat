// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum MuscleGroupEnum {
  PECHO
  HOMBROS
  TRICEPS
  ESPALDA
  BICEPS
  ABDOMINALES
  CUADRICEPS
  ISQUIOTIBIALES
  GEMELOS
  GLUTEOS
}
enum UserSexEnum {
  HOMBRE
  MUJER
  OTRO
}
enum UserRoleEnum {
  ADMIN
  USER
}

// Tables
model MuscleGroup{
  id Int @id @default(autoincrement())
  name String @unique

  @@map("muscle_groups")
}
model UserSex{
  id Int @id @default(autoincrement())
  name String @unique

  @@map("user_sexs")
}
model UserRole{
  id Int @id @default(autoincrement())
  name String @unique

  @@map("user_roles")
}

model Nationality{
  id Int @id @default(autoincrement())
  name String @unique
  flag String?
  users User[]

  @@map("nationalities")
}

model Rank{
  id Int @id @default(autoincrement())
  number Int @unique
  name String
  requiredXp Int @map("required_xp")
  image String?
  users User[]

  @@map("ranks")
}

model User{
  id String @id @default(uuid())
  username String @unique
  email String @unique
  password String 
  name String
  surname String
  role UserRoleEnum @default(USER)
  age Int 
  bio String?
  weightKg Float @map("weight_kg")
  heightCm Int @map("height_cm")
  sex UserSexEnum
  xp Int @default(0)
  level Int @default(1)
  coins Int @default(0)
  image String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  nationalityId Int @map("nationality_id")
  rankId Int @map("rank_id")
  nationalities Nationality @relation(fields: [nationalityId], references: [id], onDelete: Cascade)
  ranks Rank @relation(fields: [rankId], references: [id], onDelete: Cascade)
  routines Routine[]
  userBadges UserBadge[]
  exercises Exercise[]
  sessions Session[]
  usersPurchases Purchase[]

  @@map("users")
}

model StoreItem{
  id Int @id @default(autoincrement())
  name String
  description String
  price Int
  image String?
  userPurchases Purchase[]
  
  @@map("store_items")
}

model Purchase{
  id Int @id @default(autoincrement())
  purchaseDate DateTime @default(now()) @map("purchase_date")
  userId String @map("user_id")
  storeItemId Int @map("store_item_id")
  users User @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeItems StoreItem @relation(fields: [storeItemId], references: [id], onDelete: Cascade)

  @@map("users_purchases")
}

model Badge{
  id Int @id @default(autoincrement())
  name String
  description String
  image String?
  rewardCoins Int @map("reward_coins")
  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge{
  id Int @id @default(autoincrement())
  earnedDate DateTime @default(now()) @map("earned_date")
  isEquipped Boolean @default(false) @map("is_equipped")
  userId String @map("user_id") 
  badgeId Int @map("badge_id")
  users User @relation(fields: [userId], references: [id], onDelete: Cascade)
  badges Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@map("users_badges")
}

model Routine{
  id Int @id @default(autoincrement())
  name String
  isCurrent Boolean @default(false) @map("is_current")
  nextWorkout Int @default(1) @map("next_workout")
  userId String @map("user_id")
  users User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts Workout[]

  @@map("routines")
}

model Workout{
  id Int @id @default(autoincrement())
  number Int
  name String
  routineId Int @map("routine_id")
  routines Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  sessions Session[]

  @@map("workouts")
}

model Exercise{
  id Int @id @default(autoincrement())
  name String
  muscleGroup MuscleGroupEnum @map("muscle_group")
  notes String?
  image String?
  userId String? @map("user_id")
  users User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  sessionExercises SessionExercise[]

  @@map("exercises")
}

model WorkoutExercise{
  id Int @id @default(autoincrement())
  rest Int
  workoutId Int @map("workout_id")
  exerciseId Int @map("exercise_id")
  workouts Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercises Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  sets Set[]

  @@map("workouts_exercises")
}

model Set{
  id Int @id @default(autoincrement())
  number Int
  weightKg Float @map("weight_kg")
  repetitions Int
  workoutExerciseId Int @map("workout_exercise_id")
  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@map("sets")
}

model Challenge{
  id Int @id @default(autoincrement())
  name String
  description String
  rewardXp Int @map("reward_xp")
  completed Boolean @default(false)
  image String?
  rewardCoins Int @map("reward_coins")
  sessions Session[]

  @@map("challenges")
}

model Session{
  id Int @id @default(autoincrement())
  datetime DateTime @default(now())
  feedback String?
  rewardXp Int @map("reward_xp")
  durationMinutes Int @map("duration_minutes")
  workoutId Int @map("workout_id")
  challengeId Int @map("challenge_id")
  userId String @map("user_id")
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  users User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionExercises SessionExercise[]

  @@map("sessions")
}

model SessionExercise{
  id Int @id @default(autoincrement())
  rest Int
  sessionId Int @map("session_id")
  exerciseId Int @map("exercise_id")
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  sessionSets SessionSets[]

  @@map("sessions_exercises")
}

model SessionSets{
  id Int @id @default(autoincrement())
  number Int
  failed Boolean @default(false)
  weightKg Float @map("weight_kg")
  repetitions Int
  sessionExerciseId Int @map("session_exercise_id")
  sessionExercise SessionExercise @relation(fields: [sessionExerciseId], references: [id], onDelete: Cascade)

  @@map("sessions_sets")
}


